CREATE DATABASE Assignment;
USE  assignment;
-- 1st QUESTION
CREATE TABLE SUPPLIER(
SUPP_ID INT PRIMARY KEY,
SUPP_NAME VARCHAR(50) NOT NULL,
SUPP_CITY VARCHAR(50) NOT NULL,
SUPP_PHONE VARCHAR(50) NOT NULL 
);

CREATE TABLE CUSTOMER (
CUS_ID INT PRIMARY KEY,
CUS_NAME VARCHAR(20) NOT NULL,
CUS_PHONE VARCHAR(10) NOT NULL,
CUS_CITY VARCHAR(30) NOT NULL,
CUS_GENDER CHAR 
);

CREATE TABLE CATEGORY(
CAT_ID INT PRIMARY KEY,
CAT_NAME VARCHAR(20) NOT NULL
);

CREATE TABLE PRODUCT(
PRO_ID INT PRIMARY KEY,
PRO_NAME VARCHAR(20) NOT NULL DEFAULT 'DUMMY',
PRO_DESC VARCHAR(60),
CAT_ID INT,
CONSTRAINT FK FOREIGN KEY (CAT_ID) REFERENCES CATEGORY(CAT_ID)
);

CREATE TABLE SUPPLIER_PRICING(
PRICING_ID INT PRIMARY KEY,
PRO_ID INT,
SUPP_ID INT,
SUPP_PRICE INT DEFAULT 0,
CONSTRAINT FK1 FOREIGN KEY (PRO_ID)REFERENCES PRODUCT(PRO_ID),
CONSTRAINT FK2 FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER(SUPP_ID)
);

CREATE TABLE ORDER_(
ORD_ID INT PRIMARY KEY,
ODR_AMOUNT INT NOT NULL,
ODR_DATE DATE NOT NULL,
CUS_ID INT ,
PRICING_ID INT,
CONSTRAINT FK3 FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID),
CONSTRAINT FK4 FOREIGN KEY (PRICING_ID) REFERENCES SUPPLIER_PRICING(PRICING_ID)
);

CREATE TABLE RATING(
RAT_ID INT PRIMARY KEY,
ORD_ID INT ,
RAT_RATSTARS INT NOT NULL,
CONSTRAINT FK5 FOREIGN KEY (ORD_ID) REFERENCES ORDER_(ORD_ID)
);

-- 2nd QUESTION

INSERT INTO SUPPLIER VALUES(1, 'Rajesh Retails',' Delhi',' 1234567890'),
(2, 'Appario Ltd.', 'Mumbai',' 2589631470'),
(3, 'Knome products', 'Banglore', '9785462315'),
(4 ,'Bansal Retails' ,'Kochi' ,'8975463285'),
(5 ,'Mittal Ltd.', 'Lucknow', '7898456532');

INSERT INTO CUSTOMER VALUES(1 ,'AAKASH ','9999999999', 'DELHI', 'M'),
(2, 'AMAN', '9785463215', 'NOIDA', 'M'),
(3, 'NEHA', '9999999999', 'MUMBAI', 'F'),
(4, 'MEGHA', '9994562399' ,'KOLKATA', 'F'),
(5, 'PULKIT', '7895999999', 'LUCKNOW', 'M');

INSERT INTO CATEGORY VALUES(1, 'BOOKS'),
(2, 'GAMES'),
(3, 'GROCERIES'),
(4, 'ELECTRONICS'),
(5, 'CLOTHES');

INSERT INTO PRODUCT VALUES(1 ,'GTA V' ,'Windows 7 and above with i5 processor and 8GB RAM', 2),
(2, 'TSHIRT', 'SIZE-L with Black, Blue and White variations', 5),
(3, 'ROG LAPTOP',' Windows 10 with 15inch screen, i7 processor, 1TB SSD', 4),
(4, 'OATS', 'Highly Nutritious from Nestle', 3),
(5, 'HARRY POTTER' ,'Best Collection of all time by J.K Rowling' ,1),
(6, 'MILK', '1L Toned MIlk', 3),
(7, 'Boat Earphones', '1.5Meter long Dolby Atmos', 4),
(8, 'Jeans', 'Stretchable Denim Jeans with various sizes and color', 5),
(9, 'Project IGI', 'compatible with windows 7 and above', 2),
(10, 'Hoodie', 'Black GUCCI for 13 yrs and above', 5),
(11, 'Rich Dad Poor Dad', 'Written by RObert Kiyosaki', 1),
(12, 'Train Your Brain', 'By Shireen Stephen', 1);

INSERT INTO SUPPLIER_PRICING VALUES(1, 1, 2, 1500),
(2, 3, 5, 30000),
(3, 5, 1, 3000),
(4, 2, 3, 2500),
(5, 4, 1, 1000),
(6, 12, 2, 780),
(7, 12, 4, 789),
(8, 3, 1, 31000),
(9, 1, 5, 1450),
(10, 4, 2, 999),
(11, 7, 3, 549),
(12, 7, 4, 529),
(13, 6, 2, 105),
(14, 6, 1, 99),
(15, 2, 5, 2999),
(16, 5, 2, 2999);

INSERT INTO ORDER_ VALUES (101, 1500, '2021-10-06',2, 1),
(102, 1000, '2021-10-12', 3, 5),
(103, 30000, '2021-09-16' ,5, 2),
(104 ,1500,' 2021-10-05', 1, 1),
(105, 3000, '2021-08-16' ,4, 3),
(106, 1450, '2021-08-18', 1, 9),
(107, 789, '2021-09-01', 3, 7),
(108, 780, '2021-09-07', 5, 6),
(109, 3000, '2021-01-10', 5, 3),
(110, 2500, '2021-09-10' ,2, 4),
(111, 1000, '2021-09-15', 4 ,5),
(112, 789, '2021-09-16', 4, 7),
(113, 31000, '2021-09-16', 1, 8),
(114, 1000, '2021-09-16' ,3, 5),
(115, 3000, '2021-09-16' ,5 ,3),
(116, 99, '2021-09-17' ,2 ,14);

INSERT INTO RATING VALUES(1 ,101, 4),
(2, 102, 3),
(3, 103, 1),
(4, 104, 2),
(5, 105, 4),
(6, 106, 3),
(7, 107, 4),
(8, 108, 4),
(9, 109, 3),
(10, 110, 5),
(11, 111, 3),
(12, 112, 4),
(13, 113, 2),
(14, 114, 1),
(15, 115, 1),
(16, 116, 0);


-- 3rd QUESTION Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000.
SELECT CUSTOMER.CUS_GENDER ,COUNT(DISTINCT CUSTOMER.CUS_ID)
FROM ORDER_ JOIN CUSTOMER ON ORDER_.CUS_ID = CUSTOMER.CUS_ID 
WHERE ORDER_.ODR_AMOUNT >= 3000 
GROUP BY CUSTOMER.CUS_GENDER;

-- 4) Display all the orders along with product name ordered by a customer having Customer_Id=2
SELECT O.ORD_ID,P.PRO_NAME 
FROM ORDER_ O JOIN SUPPLIER_PRICING SP ON O.PRICING_ID = SP.PRICING_ID
JOIN PRODUCT P ON SP.PRO_ID = P.PRO_ID
WHERE O.CUS_ID=2; 

-- 5) Display the Supplier details who can supply more than one product.
SELECT S.* FROM 
SUPPLIER S JOIN SUPPLIER_PRICING SP ON S.SUPP_ID=SP.SUPP_ID
GROUP BY S.SUPP_ID 
HAVING COUNT(DISTINCT SP.PRO_ID)>1;

-- 6) Create a view as lowest_expensive_product and display the least expensive product from each category and print the table
-- with category id, name, product name and price of the product.
CREATE VIEW Lowest_expensive_product AS
SELECT C.CAT_ID, C.CAT_NAME, P.PRO_NAME,MIN(SP.SUPP_PRICE) PRICE 
FROM CATEGORY C JOIN PRODUCT P ON C.CAT_ID = P.CAT_ID
JOIN SUPPLIER_PRICING SP ON P.PRO_ID=SP.PRO_ID
GROUP BY C.CAT_ID;

-- 7) Display the Id and Name of the Product ordered after “2021-10-05”.
SELECT P.PRO_ID ,P.PRO_NAME FROM PRODUCT P
JOIN SUPPLIER_PRICING SP ON P.PRO_ID=SP.PRO_ID
JOIN ORDER_ O ON SP.PRICING_ID= O.PRICING_ID 
WHERE ODR_DATE > '2021-10-05';

-- 8) Display customer name and gender whose names start or end with character 'A'.
SELECT CUS_NAME, CUS_GENDER  FROM CUSTOMER WHERE CUS_NAME LIKE ('%A') OR CUS_NAME LIKE('A%');

/*
9) Create a stored procedure to display supplier id, name, Rating(Average rating of all the products sold by every customer) and
Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print
“Average Service” else print “Poor Service”. Note that there should be one rating per supplier
*/

DROP PROCEDURE Supplier_Rating_Service;
DELIMITER $$
CREATE PROCEDURE Supplier_Rating_Service()
BEGIN
    SELECT 
        s.SUPP_ID, 
        s.SUPP_NAME,
        CASE 
            WHEN AVG(r.RAT_RATSTARS) = 5 THEN 'Excellent Service'
            WHEN AVG(r.RAT_RATSTARS) > 4 THEN 'Good Service'
            WHEN AVG(r.RAT_RATSTARS) > 2 THEN 'Average Service'
            ELSE 'Poor Service'
        END AS Type_of_Service
    FROM SUPPLIER S
    JOIN SUPPLIER_PRICING SP ON S.SUPP_ID = SP.SUPP_ID
    JOIN ORDER_ O ON SP.PRICING_ID = O.PRICING_ID
    JOIN RATING R ON O.ORD_ID = R.ORD_ID
    GROUP BY S.SUPP_ID, S.SUPP_NAME;
END$$;
DELIMITER ;

CALL Supplier_Rating_Service();


CREATE DATABASE GL;
use GL;
CREATE TABLE employee (
id INT PRIMARY KEY,
emp_name VARCHAR(50) NOT NULL,
email_id VARCHAR(50) NOT NULL,
Phn_no VARCHAR(15)
);
select * from employee;
drop table employee;
desc  employee;
select * from employee;

update employee set ename='karthick',Phn_no='1234567890' where emp_id=3;
